name: LISF AppImage
on:
  push:
    branches:
      - feature/test_appimage
  release:
    types:
      - published
  workflow_dispatch:

jobs:
  build:
    name: Publish AppImage
    runs-on: ubuntu-22.04
    if: ${{ !contains(github.ref, 'support/lisf-557ww') }}
    steps:
      - if: github.event_name == 'release'
        run: echo "DEV_IMAGE=${{ github.event.release.target_commitish }}" >>$GITHUB_ENV
      - if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
        run: echo "DEV_IMAGE=master" >>$GITHUB_ENV
      - name: Get LISF libraries image
        run: curl -O https://portal.nccs.nasa.gov/lisdata_pub/TESTING/dev-images/$DEV_IMAGE/lisf_libraries.tar.gz
      - name: Load LISF libraries image
        run: docker image load --input lisf_libraries.tar.gz
      - name: Checkout LISF source code
        uses: actions/checkout@v3
      - name: Compile LISF
        run: docker build --build-arg LISF_SOURCE=$GITHUB_WORKSPACE --tag lisf_appdir --file ./.github/scripts/appimage/Dockerfile $GITHUB_WORKSPACE/..
      - name: Make AppImage
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends wget
          sudo apt-get install -y --no-install-recommends fuse
          wget https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage
          chmod 755 appimagetool-x86_64.AppImage
          mv appimagetool-x86_64.AppImage /usr/local/bin/appimagetool
          ./.github/scripts/appimage/make_appimage
      - name: Prepare release notes
        if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
        run: |
          echo "This AppImage is compatible with:" >>"$RUNNER_TEMP/notes.md"
          echo "" >>"$RUNNER_TEMP/notes.md"
          echo "* Linux: x86_64 machines (as reported by \`uname -s -m\`)" >>"$RUNNER_TEMP/notes.md"
          echo "* GLIBC: 2.22 or newer (as reported by \`ldd --version\`)" >>"$RUNNER_TEMP/notes.md"
          echo "* MPI: MPICH, Intel MPI, or Cray MPI" >>"$RUNNER_TEMP/notes.md"
          echo "" >>"$RUNNER_TEMP/notes.md"
          echo "After downloading the AppImage, run:" >>"$RUNNER_TEMP/notes.md"
          echo "" >>"$RUNNER_TEMP/notes.md"
          echo "\`\`\`" >>"$RUNNER_TEMP/notes.md"
          echo "chmod 755 ./LISF-x86_64.AppImage" >>"$RUNNER_TEMP/notes.md"
          echo "\`\`\`" >>"$RUNNER_TEMP/notes.md"
          echo "" >>"$RUNNER_TEMP/notes.md"
          echo "To get started with the AppImage, run:" >>"$RUNNER_TEMP/notes.md"
          echo "" >>"$RUNNER_TEMP/notes.md"
          echo "\`\`\`" >>"$RUNNER_TEMP/notes.md"
          echo "./LISF-x86_64.AppImage -h" >>"$RUNNER_TEMP/notes.md"
          echo "\`\`\`" >>"$RUNNER_TEMP/notes.md"
          echo "" >>"$RUNNER_TEMP/notes.md"
          echo "Note:" >>"$RUNNER_TEMP/notes.md"
          echo "" >>"$RUNNER_TEMP/notes.md"
          echo "This AppImage requires FUSE to run.  If you get an error, then try:" >>"$RUNNER_TEMP/notes.md"
          echo "\`\`\`" >>"$RUNNER_TEMP/notes.md"
          echo "mkdir LISF-x86_64" >>"$RUNNER_TEMP/notes.md"
          echo "cd LISF-x86_64" >>"$RUNNER_TEMP/notes.md"
          echo "../LISF-x86_64.AppImage --appimage-extract" >>"$RUNNER_TEMP/notes.md"
          echo "cd .." >>"$RUNNER_TEMP/notes.md"
          echo "./LISF-x86_64/squashfs-root/AppRun -h" >>"$RUNNER_TEMP/notes.md"
          echo "\`\`\`" >>"$RUNNER_TEMP/notes.md"
      - name: Create pre-release
        if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
        env:
          GH_TOKEN: ${{ github.token }}
          LISF_TAG: test_appimage
          PRERELEASE: --prerelease
          TITLE: "LISF master (pre-release) image"
        run: |
          gh release delete $LISF_TAG --yes || true
          git push origin :$LISF_TAG || true
          gh release create $LISF_TAG $PRERELEASE --notes-file "$RUNNER_TEMP/notes.md" --title "$TITLE" --target $GITHUB_SHA ./LISF-x86_64.AppImage
      - name: Upload asset
        if: github.event_name == 'release'
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh release upload ${{ github.event.release.tag_name }} ./LISF-x86_64.AppImage
